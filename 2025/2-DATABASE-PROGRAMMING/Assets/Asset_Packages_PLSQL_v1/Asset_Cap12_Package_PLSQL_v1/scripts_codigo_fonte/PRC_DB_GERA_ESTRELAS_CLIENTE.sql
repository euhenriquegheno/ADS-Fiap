CREATE OR REPLACE PROCEDURE PRC_DB_GERA_ESTRELAS_CLIENTE
IS
    -- VARIÁVEL CONTADOR INTERNO PARA CADA LINHA PROCESSADA.
    V_CONTADOR NUMBER := 00;	
	-- VARIÁVEL QUE IRÁ RECEBER O NÚMERO DE ESTRELAS DO CLIENTE
	V_QT_ESTRELAS DB_CLIENTE.QT_ESTRELAS%TYPE;
    -- VARIÁVEL QUE IRÁ RECEBER O VALOR DO TICKET MÉDIO DE COMPRA DO CLIENTE
    V_VL_TICKET_MEDIO NUMBER(10,2);

BEGIN
	-- UTILIZAMOS O FOR LOOP PARA PROCESSAR TODOS OS CLIENTES.
	FOR z IN (SELECT ROWID, NR_CLIENTE, QT_ESTRELAS FROM DB_CLIENTE)
	LOOP
        -- Adicionamos 1 ao nosso contador de processamento.
        v_contador := v_contador + 1;
		--
		-- CALCULA O VALOR DO TICKET MÉDIO DO CLIENTE
        -- QUE SE ENCONTRA NA VARIÁVEL INTERNA Z.NR_CLIENTE
		--
		SELECT  ROUND(AVG(P.VL_TOT_PEDIDO),2)
		INTO    V_VL_TICKET_MEDIO
		FROM    DB_PEDIDO P INNER JOIN DB_CLIENTE C
		ON  (C.NR_CLIENTE = P.NR_CLIENTE)
		WHERE   C.NR_CLIENTE = z.nr_cliente;
	 
		-- Agora vamos calcular a quantidade de estrelas
		-- a partir do valor médio de compra feito pelo cliente.
		IF V_VL_TICKET_MEDIO > 399 THEN
		   V_QT_ESTRELAS := 5;
		ELSIF V_VL_TICKET_MEDIO > 380 THEN
			V_QT_ESTRELAS := 4;
		ELSIF V_VL_TICKET_MEDIO > 320 THEN
			V_QT_ESTRELAS := 3;
		ELSIF V_VL_TICKET_MEDIO > 280 THEN
			V_QT_ESTRELAS := 2;
		ELSE
			V_QT_ESTRELAS := 1;
		END IF;

		-- Após trabalharmos com o comando IF ELSIF ELSE END IF
		-- chegamos a uma nova quantidade de número de estrelas.
		UPDATE 	DB_CLIENTE C SET C.QT_ESTRELAS = V_QT_ESTRELAS
		WHERE	C.ROWID = z.rowid;

	END LOOP;
	
    -- CONFIRMAMOS A TRANSAÇÃO PENDENTE
	COMMIT;
    
	-- A MENSAGEM DEVE PERMANECER EXIBIDA ATÉ O ÚLTIMO INSTANTE 
	-- ANTES DE ENTRAR EM PRODUÇÃO. DEPOIS DEVEMOS COMENTÁ-LA COM
	-- /* <MSG> */
    DBMS_OUTPUT.PUT_LINE('ATUALIZAMOS O TOTAL DE (' || V_CONTADOR || ') CLIENTES.');

END;
/

--
-- EXECUTANDO A PROCEDURE
BEGIN
	PRC_DB_GERA_ESTRELAS_CLIENTE;
END;	

SELECT NR_CLIENTE, NM_CLIENTE, QT_ESTRELAS
FROM DB_CLIENTE 
ORDER BY 1;
/

